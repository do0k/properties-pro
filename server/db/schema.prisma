// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int               @id @default(autoincrement())
  code        String            @unique
  otp         String?
  mobile      String            @unique
  expire      DateTime?         @db.Timestamptz()
  profileId   Int
  createdAt   DateTime          @default(now()) @db.Timestamptz()
  updatedAt   DateTime          @updatedAt @db.Timestamptz()
  deletedAt   DateTime?         @db.Timestamptz()
  properties  Property[]
  agreements  Agreement[]
  payments    Payment[]
  orders      Order[]
  permissions UserPermissions[]
  roles       UserRoles[]
  profile     Profile?
}

model Profile {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  name      String    @db.VarChar(128)
  family    String    @db.VarChar(128)
  gender    String    @default("آقا") @db.VarChar(128)
  code      String    @unique @db.VarChar(10)
  brith     DateTime? @db.Timestamptz
  born      String    @db.VarChar(128)
  createdAt DateTime  @default(now()) @db.Timestamptz
  updatedAt DateTime  @updatedAt @db.Timestamptz
  deletedAt DateTime? @db.Timestamptz
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Permission {
  id        Int               @id @default(autoincrement())         
  name      String
  slug      String            @unique
  createdAt DateTime          @default(now()) @db.Timestamptz
  updatedAt DateTime          @updatedAt @db.Timestamptz
  deletedAt DateTime?         @db.Timestamptz
  roles     RolePermissions[]
  users     UserPermissions[]
}

model Role {
  id          Int               @id @default(autoincrement())
  name        String
  slug        String            @unique
  createdAt   DateTime          @default(now()) @db.Timestamptz
  updatedAt   DateTime          @updatedAt @db.Timestamptz
  deletedAt   DateTime?         @db.Timestamptz
  permissions RolePermissions[]
  users       UserRoles[]
}

model RolePermissions {
  roleId       Int
  role         Role       @relation(fields: [roleId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assignedAt   DateTime   @default(now()) @db.Timestamptz

  @@id([roleId, permissionId])
}

model UserRoles {
  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  userId Int
  user   User @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@id([userId, roleId])
}

model UserPermissions {
  userId       Int
  user         User       @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assignedAt   DateTime   @default(now()) @db.Timestamptz

  @@id([userId, permissionId])
}

model Property {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  usage       String
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  rent        Int
  meterage    Int
  deposit     Int
  collateral  Int
  details     Json?
  address     String
  createdAt   DateTime    @default(now()) @db.Timestamptz()
  updatedAt   DateTime    @updatedAt @db.Timestamptz()
  daletedAt   DateTime    @db.Timestamptz()
  agreements  Agreement[]
}

model Agreement {
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now()) @db.Timestamptz()
  updatedAt  DateTime @updatedAt @db.Timestamptz()
  daletedAt  DateTime @db.Timestamptz()
  userId     Int
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  details    Json?
  startAt    DateTime @db.Timestamptz()
  dueAt      DateTime @db.Timestamptz()
  orders     Order[]

  @@id([userId, propertyId, startAt])
}

model Payment {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id])
  userId    Int
  amount    Int
  date      DateTime      @db.Timestamptz()
  status    PaymentStatus
  portId    Int
  port      PaymentPort   @relation(fields: [portId], references: [id])
  createdAt DateTime      @default(now()) @db.Timestamptz()
  updatedAt DateTime      @updatedAt @db.Timestamptz()
  orderId   Int
  order     Order         @relation(fields: [orderId], references: [id])
}

model Order {
  id         Int       @id @default(autoincrement())
  userId     Int
  propertyId Int
  amount     Int
  paid       Boolean   @default(false)
  dueAt      DateTime  @db.Timestamptz()
  madeAt     DateTime  @db.Timestamptz()
  agreement  Agreement @relation(fields: [userId, propertyId, madeAt], references: [userId, propertyId, startAt])
  user       User      @relation(fields: [userId], references: [id])
  payments   Payment[]
}

model PaymentPort {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String
  details   Json?
  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @updatedAt @db.Timestamptz()
  payments  Payment[]
}

enum UserRole {
  ADMIN
  USER
}

enum PaymentStatus {
  DONE
  PENDING
  RETURNED
  CANCELED
  CREATED
  PAID
}
